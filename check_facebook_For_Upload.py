import serial, sys, feedparser, time# This script requires you to install feedparser. you can get it from http://www.feedparser.org/# it assumes you have an arduino connected with a serial lcd connected on the rx pin (0)# it is based on the script from J4mie at http://www.j4mie.org/2008/02/15/how-to-make-a-physical-gmail-notifier/ Thank you J4mie# the arduino code is from http://userwww.sfsu.edu/~infoarts/technical/arduino/wilson.serialio.ver42.txt and is essentially unaltered. Thank you Stephen# THIS CODE REQUIRES YOUR ARDUINO to have the auto-reset disabled. For more info on how to do this go here http://blog.tinyenormous.com/2008/11/08/removing-the-auto-reset-in-bare-bones-board-arduino/#Settings - Change these to match your account details#to find what your arduino is called type "ls /dev/tty.*" into the terminal.## Python CodeMAXCOUNT=25 			# total number of updates to displaySCROLLINGDELAY=.5       # delay between updates in secondsUPDATEDELAY=2 			# pause between screensLOOPS=100				# number of times for the python script to loop## Arduino Code SERIALPORT = "/dev/tty.PLxxxxxxxxxxxxxxxx" # FACEBOOKFEED="http://www.facebook.com/feeds/friends_status.php?id=xxxxxxxxxxxxxxxxxxxxxxxxxxxxx" # this is the facebook updates rss feed. make it your own! LNLENGTH=60  			# number of characters in display (ex 3x20=60)POSITION="?x00?y1" 		# location on screen - the first two digits are the x (0-19), the second is the y (0-3)						# you will need to change this if you have a different serial lcd controller - I'm using the lcd117 from paul badgerSCROLL="NO"				# do you want it to scroll or to show a page at a time? (YES/NO)#_______________________ Don't mess with these. Trust me - it won't help.PAGES=0CONNECTED=0				#variable to hold serial device statusMESSAGENUMBER=""#_______________________try:	ser = serial.Serial(SERIALPORT, 9600)except serial.SerialException:	print "no device connected exiting"	sys.exit()for i in range(1, LOOPS): # loop it a lot		d = feedparser.parse(FACEBOOKFEED) 		# here feedparser does the hard work of loasding the rss feed		for i in range(1, MAXCOUNT+1):	          # for each update in the range		print d['items'][i-1].title		      # print the subject to the terminal		TXT2SCROLL=(str(d['items'][i-1].title)) #move variable to TXT2SCROLL as a string		MESSAGENUMBER = ("("+ str(i) + "/"+ str(MAXCOUNT)+ ")")  # create message # of total ex (2of3)		if (len(TXT2SCROLL) >= LNLENGTH):               	# check if message is too big to display			if SCROLL=="YES":								# and scrolling is set to yes - start scrolling				SCROLLINGTAIL=(len(TXT2SCROLL)-LNLENGTH)    # find length of extra text				ser.write("?f") 				 			 # clear lcd		  				ser.write(MESSAGENUMBER)		 			 # print message number to serial port				for i in range(1, SCROLLINGTAIL+1):           # make loop of appropriate length					TEMP=TXT2SCROLL[i-1:]         		       # cut off the front bit					ser.write(POSITION)			 			 # go to the start point					ser.write(TEMP[:-((SCROLLINGTAIL+1)-i)])  	 # cut off the back bit and print					time.sleep(SCROLLINGDELAY)  	    	      # wait SCROLLINGDELAY seconds	  			else:											    	# start showing screens				PAGES=int(round((len(TXT2SCROLL))/LNLENGTH)+2) # loop equals number of chars divided by line length, rounded and increased by 2. Loop = the number of pages the text will fit on. As defined by LNLENGTH.				CURSOR=LNLENGTH # start point for the cursor				for i in range(1, PAGES): 				# loop it out					TEMP=(TXT2SCROLL[:CURSOR]) 			# Cut off the text to the right of the cursor					ser.write("?f") 					# clear lcd					ser.write(MESSAGENUMBER)					ser.write(POSITION)												ser.write(TEMP[-(LNLENGTH-CURSOR):]) #select the previous LNLENGTH from the end of the text section, then print it to serial					CURSOR += LNLENGTH 					 # increment cursor by line length					time.sleep(UPDATEDELAY) 			 # pause for readability							else:											# it's not big enough to scroll silly.			ser.write("?f") 							# clear lcd			ser.write(MESSAGENUMBER)					# print message number			ser.write(POSITION)							# go to the right spot			ser.write(TXT2SCROLL)						# print short text to serial			time.sleep(UPDATEDELAY)	time.sleep(UPDATEDELAY)  	    	 			    # wait UPDATEDELAY seconds	  ser.close() 	   #close serial port